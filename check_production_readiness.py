#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É
"""

import os
import sys
from pathlib import Path

def check_file_exists(file_path, description):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"""
    if os.path.exists(file_path):
        print(f"‚úÖ {description}: {file_path}")
        return True
    else:
        print(f"‚ùå {description}: {file_path} - –ù–ï –ù–ê–ô–î–ï–ù")
        return False

def check_environment_variables():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    required_vars = [
        'SECRET_KEY',
        'POSTGRES_PASSWORD',
        'ALLOWED_HOSTS',
        'YOOKASSA_SHOP_ID',
        'YOOKASSA_SECRET_KEY'
    ]
    
    env_file = 'env.production'
    if not os.path.exists(env_file):
        print(f"‚ùå –§–∞–π–ª {env_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    with open(env_file, 'r') as f:
        content = f.read()
    
    missing_vars = []
    for var in required_vars:
        if var in content and not content.split(var + '=')[1].split('\n')[0].startswith('your_'):
            print(f"‚úÖ {var}: –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            print(f"‚ùå {var}: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            missing_vars.append(var)
    
    return len(missing_vars) == 0

def check_security_settings():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    print("\nüõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Django settings
    settings_file = 'digital_marketplace/settings_production.py'
    if os.path.exists(settings_file):
        with open(settings_file, 'r') as f:
            content = f.read()
        
        security_checks = [
            ('DEBUG = False', 'DEBUG –æ—Ç–∫–ª—é—á–µ–Ω'),
            ('SECURE_SSL_REDIRECT', 'SSL —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω'),
            ('SECURE_HSTS_SECONDS', 'HSTS –Ω–∞—Å—Ç—Ä–æ–µ–Ω'),
            ('X_FRAME_OPTIONS', 'X-Frame-Options –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
        ]
        
        for check, description in security_checks:
            if check in content:
                print(f"‚úÖ {description}")
            else:
                print(f"‚ùå {description} - –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    else:
        print(f"‚ùå –§–∞–π–ª {settings_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")

def check_docker_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç Docker —Ñ–∞–π–ª—ã"""
    print("\nüê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker —Ñ–∞–π–ª–æ–≤...")
    
    docker_files = [
        ('Dockerfile.production', 'Production Dockerfile'),
        ('docker-compose.production.yml', 'Production docker-compose'),
        ('nginx.production.conf', 'Production nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è')
    ]
    
    all_exist = True
    for file_path, description in docker_files:
        if check_file_exists(file_path, description):
            all_exist = all_exist and True
        else:
            all_exist = False
    
    return all_exist

def check_frontend_production():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É"""
    print("\nüé® –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...")
    
    frontend_files = [
        ('frontend-vue/vite.config.production.ts', 'Production Vite –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è'),
        ('frontend-vue/Dockerfile.production', 'Production Dockerfile'),
        ('frontend-vue/nginx.conf', 'Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è')
    ]
    
    all_exist = True
    for file_path, description in frontend_files:
        if check_file_exists(file_path, description):
            all_exist = all_exist and True
        else:
            all_exist = False
    
    return all_exist

def check_ssl_certificates():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã"""
    print("\nüîí –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤...")
    
    ssl_dir = 'ssl'
    if os.path.exists(ssl_dir):
        cert_files = ['cert.pem', 'key.pem']
        for cert_file in cert_files:
            cert_path = os.path.join(ssl_dir, cert_file)
            if os.path.exists(cert_path):
                print(f"‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: {cert_path}")
            else:
                print(f"‚ùå SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: {cert_path} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
    else:
        print(f"‚ö†Ô∏è  –ü–∞–ø–∫–∞ {ssl_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–π—Ç–µ –µ—ë –∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É")
    print("=" * 60)
    
    checks_passed = 0
    total_checks = 6
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
    if check_file_exists('env.production', '–§–∞–π–ª –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è'):
        checks_passed += 1
    
    if check_environment_variables():
        checks_passed += 1
    
    check_security_settings()
    checks_passed += 1
    
    if check_docker_files():
        checks_passed += 1
    
    if check_frontend_production():
        checks_passed += 1
    
    check_ssl_certificates()
    checks_passed += 1
    
    # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    print("\n" + "=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {checks_passed}/{total_checks}")
    
    if checks_passed == total_checks:
        print("üéâ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: make deploy")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: make health-check")
    else:
        print("‚ö†Ô∏è  –ü—Ä–æ–µ–∫—Ç –ù–ï –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!")
        print("\nüîß –ß—Ç–æ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:")
        print("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ ‚ùå –æ—à–∏–±–∫–∏ –≤—ã—à–µ")
        print("- –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ–∞–π–ª—ã")
        print("- –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–Ω–æ–≤–∞")
    
    return checks_passed == total_checks

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
